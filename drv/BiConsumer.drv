/*
 * Copyright (C) 2017-2024 Sebastiano Vigna
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package PACKAGE;

import java.util.function.BiConsumer;

/** A type-specific {@link BiConsumer}.
 *
 * @see BiConsumer
 * @since 8.5.18
 */

@FunctionalInterface
public interface KEY_VALUE_BICONSUMER KEY_VALUE_GENERIC extends BiConsumer<KEY_GENERIC_CLASS, VALUE_GENERIC_CLASS> {
#if KEYS_PRIMITIVE || VALUES_PRIMITIVE
	/**
	 * Performs this operation on the given entry.
	 *
	 * @param k the key.
	 * @param v the value.
	 */
	void accept(KEY_GENERIC_TYPE k,VALUE_GENERIC_TYPE v);

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	default void accept(KEY_GENERIC_CLASS key,VALUE_GENERIC_CLASS value) {
#if KEYS_PRIMITIVE && VALUES_PRIMITIVE
    	this.accept(key.KEY_VALUE(),value.VALUE_VALUE());
#elif KEYS_PRIMITIVE
		this.accept(key.KEY_VALUE(),value);
#else
		this.accept(key,value.VALUE_VALUE());
#endif
	}
	default KEY_VALUE_BICONSUMER KEY_VALUE_GENERIC andThen(final  KEY_VALUE_BICONSUMER KEY_VALUE_GENERIC after) {
		java.util.Objects.requireNonNull(after);
		return (k,v) -> { accept(k,v); after.accept(k,v); };
	}
	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	default BiConsumer<KEY_GENERIC_CLASS,VALUE_GENERIC_CLASS> andThen(final BiConsumer<? super KEY_GENERIC_CLASS,? super VALUE_GENERIC_CLASS> after) {
		return BiConsumer.super.andThen(after);
	}
#endif
}
